import React, { useEffect, useState } from "react";
import axios from "axios";
import { Modal, Box, Typography, Button } from "@mui/material";

const NewOrderExpert = () => {
  const [orders, setOrders] = useState([]);
  const [selectedOrder, setSelectedOrder] = useState(null); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  const [isModalOpen, setIsModalOpen] = useState(false); // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const token = sessionStorage.getItem("access_token");
        if (!token) {
          console.error("No access token found in sessionStorage");
          return;
        }

        const response = await axios.get("http://147.45.146.242/api/orders/", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
        const now = new Date();
        const oneDayAgo = new Date();
        oneDayAgo.setDate(now.getDate() - 1);

        const filteredOrders = response.data.filter((order) => {
          const createdAt = new Date(order.created_at);
          return createdAt >= oneDayAgo;
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ —Å–≤–µ—Ä—Ö—É)
        const sortedOrders = filteredOrders.sort(
          (a, b) => new Date(b.created_at) - new Date(a.created_at)
        );

        setOrders(sortedOrders);
      } catch (error) {
        console.error("Error fetching orders:", error);
      }
    };

    fetchOrders();
  }, []);

  const handleOpenModal = (order) => {
    setSelectedOrder(order); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    setIsModalOpen(true); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  };

  const handleCloseModal = () => {
    setSelectedOrder(null); // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    setIsModalOpen(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat("ru-RU", {
      day: "numeric",
      month: "long",
      hour: "2-digit",
      minute: "2-digit",
    })
      .format(date)
      .replace(" –≥.", "");
  };

  return (
    <div>
      <h1>–°–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö</h1>
      <p>
        –û—Ç–∫–ª–∏–∫–∞–π—Ç–µ—Å—å –Ω–∞ –∑–∞–∫–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è. –ò –µ—Å–ª–∏ –≤–∞—Å
        –≤—ã–±–µ—Ä—É—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º - –º—ã –Ω–∞—á–∏—Å–ª–∏–º –Ω–∞ 50% –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∑–∞
        –∑–∞–∫–∞–∑ üòé
      </p>
      <div>
        {orders.map((order) => (
          <div
            key={order.id}
            style={{
              border: "1px solid #ccc",
              borderRadius: "8px",
              padding: "16px",
              marginBottom: "16px",
              backgroundColor: "#fff",
            }}
          >
            <div style={{ display: "flex", justifyContent: "space-between" }}>
              <span style={{ fontSize: "14px", color: "#888" }}>
                {formatDate(order.created_at)}
              </span>
              <a
                href="#"
                style={{
                  fontSize: "14px",
                  color: "#007bff",
                  textDecoration: "none",
                }}
              >
                –£–¥–∞–ª–∏—Ç—å
              </a>
            </div>
            <h3 style={{ margin: "8px 0" }}>{order.title}</h3>
            <p style={{ fontSize: "14px", color: "#555" }}>
              {order.description}
            </p>
            <div style={{ marginTop: "16px", display: "flex", gap: "16px" }}>
              <button
                style={{
                  padding: "8px 16px",
                  backgroundColor: "#007bff",
                  color: "#fff",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer",
                }}
                onClick={() => handleOpenModal(order)} // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
              >
                –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞
              </button>
              <button
                style={{
                  padding: "8px 16px",
                  backgroundColor: "#f8f9fa",
                  color: "#007bff",
                  border: "1px solid #007bff",
                  borderRadius: "4px",
                  cursor: "pointer",
                }}
              >
                –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–∞
              </button>
            </div>
          </div>
        ))}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
      <Modal open={isModalOpen} onClose={handleCloseModal}>
        <Box
          sx={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            width: "80%",
            maxWidth: "800px",
            bgcolor: "background.paper",
            border: "2px solid #000",
            boxShadow: 24,
            p: 4,
            borderRadius: "8px",
          }}
        >
          {selectedOrder && (
            <>
              <Typography variant="h6" component="h2" gutterBottom>
                {selectedOrder.title}
              </Typography>
              <Typography variant="body1" gutterBottom>
                <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {selectedOrder.description}
              </Typography>
              <Typography variant="body1" gutterBottom>
                <strong>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</strong>{" "}
                {new Date(selectedOrder.deadline).toLocaleDateString("ru-RU", {
                  day: "numeric",
                  month: "long",
                })}
              </Typography>
              <Typography variant="body1" gutterBottom>
                <strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤:</strong> {selectedOrder.files_count}
              </Typography>
              <Typography variant="body1" gutterBottom>
                <strong>–ó–∞–∫–∞–∑—á–∏–∫:</strong> {selectedOrder.customer_name} [
                {selectedOrder.customer_id}]
              </Typography>
              <Button
                variant="contained"
                color="primary"
                onClick={handleCloseModal}
                sx={{ mt: 2 }}
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </Button>
            </>
          )}
        </Box>
      </Modal>
    </div>
  );
};

export default NewOrderExpert;