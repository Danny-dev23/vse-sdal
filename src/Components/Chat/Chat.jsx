import React, { useState, useEffect, useRef } from "react";
import Message from "./Message";
import './chatInterface.css';

function Chat({chatId}) {
  const [messages, setMessages] = useState([]);
  const [messageText, setMessageText] = useState("");
  const [templates, setTemplates] = useState([]);
  const chatRef = useRef(null);
  const socketRef = useRef(null);
  const token = sessionStorage.getItem("access_token");
  const chat = chatId;
  
  useEffect(() => {
    const wsUrl = `ws://147.45.146.242/ws/chat/${chatId}/?token=${encodeURIComponent(token)}`;
    socketRef.current = new WebSocket(wsUrl);

    socketRef.current.onopen = async () => {
      console.log("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
      await loadTemplates();
    };

    socketRef.current.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        if (data.message) {
          setMessages((prev) => [...prev, data.message]);
        }
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
      }
    };

    socketRef.current.onclose = () => {
      console.log("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ");
    };

    return () => {
      socketRef.current.close();
    };
  }, [token]);
  console.log(messages);
  
  const loadTemplates = async () => {
    try {
      const response = await fetch("http://127.0.0.1:8000/api/templates/", {
        headers: { Authorization: `Bearer ${token}` },
      });

      if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤");
      const data = await response.json();
      setTemplates(data);
    } catch (error) {
      console.error(error.message);
    }
  };

  const sendMessage = (e) => {
    e.preventDefault();
    if (messageText.trim() && socketRef.current) {
      socketRef.current.send(JSON.stringify({ text: messageText }));
      setMessageText("");
    }
  };
  
  return (
    <div className="chat-interface">
      <div className="chat-sidebar">
        <div className="chat-sidebar__header">
          <button className="chat-sidebar__menu-btn">‚ò∞</button>
          <div className="chat-sidebar__search">
            <span>–í—Å–µ, –≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –∫–æ—Å–º–æ—Å</span>
          </div>
        </div>

        <div className="chat-sidebar__subtitle">
          <span>–Ω–∞–ø—Ä–∏–º–µ—Ä: –†–µ—à–∏—Ç—å 10 –∑–∞–¥–∞—á –ø–æ –≤—ã—Å—à–µ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ</span>
        </div>

        <div className="chat-contacts">
          <div className="chat-contact active">
            <div className="chat-contact__avatar">
              <img src="https://images.pexels.com/photos/2379004/pexels-photo-2379004.jpeg?auto=compress&cs=tinysrgb&w=50&h=50&dpr=1" alt="–î–∞–Ω–∏–ª" />
              <div className="chat-contact__online-indicator"></div>
            </div>
            <div className="chat-contact__info">
              <div className="chat-contact__header">
                <span className="chat-contact__name">–î–∞–Ω–∏–ª</span>
                <span className="chat-contact__id">ID2681916</span>
              </div>
              <div className="chat-contact__status">–ø—Ä–∏–≤–µ—Ç</div>
            </div>
          </div>
        </div>

        <div className="chat-sidebar__recent">
          <div className="chat-recent-item">
            <div className="chat-recent-item__content">
              <span className="chat-recent-item__name">—Å–∞–ª–∞–º–∞–ª–µ–∫—Å—É—Å</span>
              <div className="chat-recent-item__meta">
                <span className="chat-recent-item__time">15:46</span>
                <span className="chat-recent-item__date">10 –∞–ø—Ä. 2025 –≥.</span>
                <span className="chat-recent-item__status">–ø—Ä–æ—á–∏—Ç–∞–Ω–æ ‚úì‚úì</span>
              </div>
            </div>
          </div>
          <div className="chat-recent-item">
            <div className="chat-recent-item__content">
              <span className="chat-recent-item__name">–¶–µ–Ω–∞: 2000 —Ä—É–±. –¥–æ—é –º–∏–ª–ª–∏–æ–Ω</span>
              <div className="chat-recent-item__meta">
                <span className="chat-recent-item__time">15:49</span>
                <span className="chat-recent-item__date">10 –∞–ø—Ä. 2025 –≥.</span>
                <span className="chat-recent-item__status">–ø—Ä–æ—á–∏—Ç–∞–Ω–æ ‚úì‚úì</span>
              </div>
            </div>
          </div>
          <div className="chat-recent-item">
            <div className="chat-recent-item__content">
              <span className="chat-recent-item__name">—Ö–µ–ª–ª–æ—É</span>
              <div className="chat-recent-item__meta">
                <span className="chat-recent-item__time">13:32</span>
                <span className="chat-recent-item__date">11 –∞–ø—Ä. 2025 –≥.</span>
                <span className="chat-recent-item__status">–ø—Ä–æ—á–∏—Ç–∞–Ω–æ ‚úì‚úì</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="chat-main">
        <div className="chat-header">
          <div className="chat-header__user">
            <img src="https://images.pexels.com/photos/2379004/pexels-photo-2379004.jpeg?auto=compress&cs=tinysrgb&w=50&h=50&dpr=1" alt="–î–∞–Ω–∏–ª" />
            <div className="chat-header__info">
              <span className="chat-header__name">–î–∞–Ω–∏–ª</span>
              <span className="chat-header__status">‚óè</span>
            </div>
          </div>
        </div>

        <div className="chat-messages" ref={chatRef}>
          {messages.map((msg, index) => (
            <Message key={index} sender={msg.sender} text={msg.text} />
          ))}
        </div>

        <div className="chat-input">
          <div className="chat-input__container">
            <select 
              onChange={(e) => setMessageText(e.target.value)}
              className="chat-input__templates"
              style={{ marginRight: '10px', padding: '8px', borderRadius: '4px', border: '1px solid #e9ecef' }}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω...</option>
              {templates.map((t, index) => (
                <option key={index} value={`${t.title}\n–¶–µ–Ω–∞: ${t.price} ‚ÇΩ\n${t.comment}`}>
                  {t.title} - {t.price} ‚ÇΩ
                </option>
              ))}
            </select>
            <input
              type="text"
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
              value={messageText}
              onChange={(e) => setMessageText(e.target.value)}
              className="chat-input__field"
            />
            <button className="chat-input__emoji">üòä</button>
            <button 
              className="chat-input__send"
              onClick={sendMessage}
              disabled={!messageText.trim()}
            >
              ‚û§
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Chat;